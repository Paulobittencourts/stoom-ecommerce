{
	"info": {
		"_postman_id": "ea46b339-4901-4f89-b07e-7de190e1c967",
		"name": "REST API: Projeto Stoom",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15232359",
		"_collection_link": "https://grey-robot-852834.postman.co/workspace/Faculdade~2539da0f-8d59-49be-8596-f86eb76b9ed2/collection/15232359-ea46b339-4901-4f89-b07e-7de190e1c967?action=share&source=collection_link&creator=15232359"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/products",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post - Creating new Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"Smartphone XYZ\",\n  \"category\": \"Eletronicos\",\n  \"brand\": \"Samsung\",\n  \"price\": 1299.99,\n  \"stock\": 50,\n  \"description\": \"Celular de ultra velocidade\",\n  \"availability\": \"IN_STOCK\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/products/create",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"products",
						"create"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productID\": 3,\n    \"stock\": 10\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/products/update/stock",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"products",
						"update",
						"stock"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/products?productID=4",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "productID",
							"value": "4"
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get All Products Stocks",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/products/stock",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"products",
						"stock"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Search Category",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/products/search/category?category=calçados",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"products",
						"search",
						"category"
					],
					"query": [
						{
							"key": "category",
							"value": "calçados"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Search Brand",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/products/search/brand?brand=adidas",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"products",
						"search",
						"brand"
					],
					"query": [
						{
							"key": "brand",
							"value": "adidas"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Search Brand And Caterogy",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/products/search?category=calçados&brand=nike",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"products",
						"search"
					],
					"query": [
						{
							"key": "category",
							"value": "calçados"
						},
						{
							"key": "brand",
							"value": "nike"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}